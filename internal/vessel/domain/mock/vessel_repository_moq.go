// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package vesseldomainmock

import (
	"context"
	"sync"

	"github.com/soulcodex/deus-cargo-tracker/internal/vessel/domain"
)

// Ensure, that VesselRepositoryMock does implement vesseldomain.VesselRepository.
// If this is not the case, regenerate this file with moq.
var _ vesseldomain.VesselRepository = &VesselRepositoryMock{}

// VesselRepositoryMock is a mock implementation of vesseldomain.VesselRepository.
//
//	func TestSomethingThatUsesVesselRepository(t *testing.T) {
//
//		// make and configure a mocked vesseldomain.VesselRepository
//		mockedVesselRepository := &VesselRepositoryMock{
//			FindFunc: func(ctx context.Context, id vesselshared.VesselID) (*vesseldomain.Vessel, error) {
//				panic("mock out the Find method")
//			},
//			SaveFunc: func(ctx context.Context, v *vesseldomain.Vessel) error {
//				panic("mock out the Save method")
//			},
//		}
//
//		// use mockedVesselRepository in code that requires vesseldomain.VesselRepository
//		// and then make assertions.
//
//	}
type VesselRepositoryMock struct {
	// FindFunc mocks the Find method.
	FindFunc func(ctx context.Context, id vesseldomain.VesselID) (*vesseldomain.Vessel, error)

	// SaveFunc mocks the Save method.
	SaveFunc func(ctx context.Context, v *vesseldomain.Vessel) error

	// calls tracks calls to the methods.
	calls struct {
		// Find holds details about calls to the Find method.
		Find []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID vesseldomain.VesselID
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// V is the v argument value.
			V *vesseldomain.Vessel
		}
	}
	lockFind sync.RWMutex
	lockSave sync.RWMutex
}

// Find calls FindFunc.
func (mock *VesselRepositoryMock) Find(ctx context.Context, id vesseldomain.VesselID) (*vesseldomain.Vessel, error) {
	if mock.FindFunc == nil {
		panic("VesselRepositoryMock.FindFunc: method is nil but VesselRepository.Find was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  vesseldomain.VesselID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockFind.Lock()
	mock.calls.Find = append(mock.calls.Find, callInfo)
	mock.lockFind.Unlock()
	return mock.FindFunc(ctx, id)
}

// FindCalls gets all the calls that were made to Find.
// Check the length with:
//
//	len(mockedVesselRepository.FindCalls())
func (mock *VesselRepositoryMock) FindCalls() []struct {
	Ctx context.Context
	ID  vesseldomain.VesselID
} {
	var calls []struct {
		Ctx context.Context
		ID  vesseldomain.VesselID
	}
	mock.lockFind.RLock()
	calls = mock.calls.Find
	mock.lockFind.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *VesselRepositoryMock) Save(ctx context.Context, v *vesseldomain.Vessel) error {
	if mock.SaveFunc == nil {
		panic("VesselRepositoryMock.SaveFunc: method is nil but VesselRepository.Save was just called")
	}
	callInfo := struct {
		Ctx context.Context
		V   *vesseldomain.Vessel
	}{
		Ctx: ctx,
		V:   v,
	}
	mock.lockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	mock.lockSave.Unlock()
	return mock.SaveFunc(ctx, v)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//
//	len(mockedVesselRepository.SaveCalls())
func (mock *VesselRepositoryMock) SaveCalls() []struct {
	Ctx context.Context
	V   *vesseldomain.Vessel
} {
	var calls []struct {
		Ctx context.Context
		V   *vesseldomain.Vessel
	}
	mock.lockSave.RLock()
	calls = mock.calls.Save
	mock.lockSave.RUnlock()
	return calls
}
