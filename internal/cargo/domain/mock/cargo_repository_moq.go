// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package cargodomainmock

import (
	"context"
	"github.com/soulcodex/deus-cargo-tracker/internal/cargo/domain"
	"sync"
)

// Ensure, that CargoRepositoryMock does implement cargodomain.CargoRepository.
// If this is not the case, regenerate this file with moq.
var _ cargodomain.CargoRepository = &CargoRepositoryMock{}

// CargoRepositoryMock is a mock implementation of cargodomain.CargoRepository.
//
//	func TestSomethingThatUsesCargoRepository(t *testing.T) {
//
//		// make and configure a mocked cargodomain.CargoRepository
//		mockedCargoRepository := &CargoRepositoryMock{
//			FindFunc: func(ctx context.Context, id cargodomain.CargoID) (*cargodomain.Cargo, error) {
//				panic("mock out the Find method")
//			},
//			SaveFunc: func(ctx context.Context, c *cargodomain.Cargo) error {
//				panic("mock out the Save method")
//			},
//		}
//
//		// use mockedCargoRepository in code that requires cargodomain.CargoRepository
//		// and then make assertions.
//
//	}
type CargoRepositoryMock struct {
	// FindFunc mocks the Find method.
	FindFunc func(ctx context.Context, id cargodomain.CargoID) (*cargodomain.Cargo, error)

	// SaveFunc mocks the Save method.
	SaveFunc func(ctx context.Context, c *cargodomain.Cargo) error

	// calls tracks calls to the methods.
	calls struct {
		// Find holds details about calls to the Find method.
		Find []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID cargodomain.CargoID
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// C is the c argument value.
			C *cargodomain.Cargo
		}
	}
	lockFind sync.RWMutex
	lockSave sync.RWMutex
}

// Find calls FindFunc.
func (mock *CargoRepositoryMock) Find(ctx context.Context, id cargodomain.CargoID) (*cargodomain.Cargo, error) {
	if mock.FindFunc == nil {
		panic("CargoRepositoryMock.FindFunc: method is nil but CargoRepository.Find was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  cargodomain.CargoID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockFind.Lock()
	mock.calls.Find = append(mock.calls.Find, callInfo)
	mock.lockFind.Unlock()
	return mock.FindFunc(ctx, id)
}

// FindCalls gets all the calls that were made to Find.
// Check the length with:
//
//	len(mockedCargoRepository.FindCalls())
func (mock *CargoRepositoryMock) FindCalls() []struct {
	Ctx context.Context
	ID  cargodomain.CargoID
} {
	var calls []struct {
		Ctx context.Context
		ID  cargodomain.CargoID
	}
	mock.lockFind.RLock()
	calls = mock.calls.Find
	mock.lockFind.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *CargoRepositoryMock) Save(ctx context.Context, c *cargodomain.Cargo) error {
	if mock.SaveFunc == nil {
		panic("CargoRepositoryMock.SaveFunc: method is nil but CargoRepository.Save was just called")
	}
	callInfo := struct {
		Ctx context.Context
		C   *cargodomain.Cargo
	}{
		Ctx: ctx,
		C:   c,
	}
	mock.lockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	mock.lockSave.Unlock()
	return mock.SaveFunc(ctx, c)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//
//	len(mockedCargoRepository.SaveCalls())
func (mock *CargoRepositoryMock) SaveCalls() []struct {
	Ctx context.Context
	C   *cargodomain.Cargo
} {
	var calls []struct {
		Ctx context.Context
		C   *cargodomain.Cargo
	}
	mock.lockSave.RLock()
	calls = mock.calls.Save
	mock.lockSave.RUnlock()
	return calls
}
