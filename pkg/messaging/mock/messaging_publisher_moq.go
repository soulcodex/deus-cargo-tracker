// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package messagingmock

import (
	"context"
	"github.com/soulcodex/deus-cargo-tracker/pkg/messaging"
	"sync"
)

// Ensure, that PublisherMock does implement messaging.Publisher.
// If this is not the case, regenerate this file with moq.
var _ messaging.Publisher = &PublisherMock{}

// PublisherMock is a mock implementation of messaging.Publisher.
//
//	func TestSomethingThatUsesPublisher(t *testing.T) {
//
//		// make and configure a mocked messaging.Publisher
//		mockedPublisher := &PublisherMock{
//			PublishFunc: func(ctx context.Context, messages ...messaging.Message) error {
//				panic("mock out the Publish method")
//			},
//		}
//
//		// use mockedPublisher in code that requires messaging.Publisher
//		// and then make assertions.
//
//	}
type PublisherMock struct {
	// PublishFunc mocks the Publish method.
	PublishFunc func(ctx context.Context, messages ...messaging.Message) error

	// calls tracks calls to the methods.
	calls struct {
		// Publish holds details about calls to the Publish method.
		Publish []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Messages is the messages argument value.
			Messages []messaging.Message
		}
	}
	lockPublish sync.RWMutex
}

// Publish calls PublishFunc.
func (mock *PublisherMock) Publish(ctx context.Context, messages ...messaging.Message) error {
	if mock.PublishFunc == nil {
		panic("PublisherMock.PublishFunc: method is nil but Publisher.Publish was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Messages []messaging.Message
	}{
		Ctx:      ctx,
		Messages: messages,
	}
	mock.lockPublish.Lock()
	mock.calls.Publish = append(mock.calls.Publish, callInfo)
	mock.lockPublish.Unlock()
	return mock.PublishFunc(ctx, messages...)
}

// PublishCalls gets all the calls that were made to Publish.
// Check the length with:
//
//	len(mockedPublisher.PublishCalls())
func (mock *PublisherMock) PublishCalls() []struct {
	Ctx      context.Context
	Messages []messaging.Message
} {
	var calls []struct {
		Ctx      context.Context
		Messages []messaging.Message
	}
	mock.lockPublish.RLock()
	calls = mock.calls.Publish
	mock.lockPublish.RUnlock()
	return calls
}
